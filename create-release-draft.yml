name: Create release draft

on: workflow_dispatch

env:
  GH_TOKEN: ${{ github.token }}
  CARGO_TERM_COLOR: always

jobs:
  extract-version:
    name: extract-version
    continue-on-error: false
    runs-on: ubuntu-latest
    outputs:
      espanso_version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: "Extract version"
        id: "version"
        run: |
          ESPANSO_VERSION=$(grep '^version' espanso/Cargo.toml | awk -F '"' '{ print $2 }')
          echo version: $ESPANSO_VERSION
          echo "::set-output name=version::v$ESPANSO_VERSION"
        # example output: v2.2.1

  create-release:
    name: create-release
    needs: ["extract-version"]
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - name: Create new release
        # gh release create docs: https://cli.github.com/manual/gh_release_create
        run: |
          COMMIT_HASH=$(git rev-list --max-count=1 HEAD)
          echo "Creating release: ${{ needs.extract-version.outputs.espanso_version }}"
          echo "for hash: $COMMIT_HASH"
          gh release create ${{ needs.extract-version.outputs.espanso_version }} \
            --title ${{ needs.extract-version.outputs.espanso_version }} \
            --notes "Automatically released by CI" \
            --verify-tag \
            --prerelease \
            --target $COMMIT_HASH
  
  windows:
    needs: ["extract-version", "create-release"]
    runs-on: windows-latest
    continue-on-error: false

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.espanso_version }}
      - name: Install rust-script and cargo-make
        run: |
          cargo install rust-script
          cargo install --force cargo-make --version 0.37.5
      - name: Test
        run: cargo make --profile release -- test-binary
      - name: Build resources
        run: cargo make --profile release -- build-windows-resources
      - name: Build installer
        run: cargo make --profile release --skip-tasks build-windows-resources -- build-windows-installer
      - name: Build portable mode archive 
        run: cargo make --profile release --skip-tasks build-windows-resources -- build-windows-portable
      - name: Create portable mode archive
        shell: powershell
        run: |
          Rename-Item -Path target/windows/portable -NewName espanso-portable
          Compress-Archive -Path target/windows/espanso-portable Espanso-Win-Portable-x86_64.zip
      - name: Calculate hashes
        shell: powershell
        run: |
          Get-FileHash Espanso-Win-Portable-x86_64.zip -Algorithm SHA256 | select-object -ExpandProperty Hash > Espanso-Win-Portable-x86_64.zip.sha256.txt
          Move-Item -Path .\target\windows\installer\Espanso-Win-Installer-x86_64.exe -Destination Espanso-Win-Installer-x86_64.exe
          Get-FileHash Espanso-Win-Installer-x86_64.exe -Algorithm SHA256 | select-object -ExpandProperty Hash > Espanso-Win-Installer-x86_64.exe.sha256.txt
      - uses: actions/upload-artifact@v4
        id: upload-artifact-windows
        name: upload-unsigned-artifact
        with:
          name: Windows Artifacts
          path: |
            .\Espanso-Win-Installer-x86_64.exe
            .\Espanso-Win-Portable-x86_64.zip
      - id: sign-windows-release
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: 'e86b1459-62fc-4c7c-aac9-185d60749a03'
          project-slug: 'espanso'
          signing-policy-slug: 'test-signing'
          github-artifact-id: ${{ steps.upload-artifact-windows.outputs.artifact-id }}
          wait-for-completion: true
          output-artifact-directory: '.'
          parameters: |
            version: "${{ needs.extract-version.outputs.espanso_version }}"
      - name: 'DEBUG: List items of ./'
        shell: powershell
        run: |
          Get-ChildItem .
      - name: Upload artifacts to Github Releases
        run: |
          gh release upload ${{ needs.extract-version.outputs.espanso_version }} Espanso-Win-Installer-x86_64.exe Espanso-Win-Portable-x86_64.zip Espanso-Win-Installer-x86_64.exe.sha256.txt Espanso-Win-Portable-x86_64.zip.sha256.txt

  linux-x11:
    needs: ["extract-version", "create-release"]
    runs-on: ubuntu-latest
    continue-on-error: false

    steps:
      - uses: actions/checkout@v4
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.espanso_version }}
      - name: Build docker image
        run: |
          sudo docker build -t espanso-ubuntu . -f .github/scripts/Dockerfile
      - name: Build AppImage
        run: |
          sudo docker run --rm -v "$(pwd):/shared" espanso-ubuntu espanso/.github/scripts/ubuntu/build_appimage.sh
      - uses: actions/upload-artifact@v4
        name: upload-unsigned-artifact
        with:
          name: Linux X11 Artifacts
          path: |
            Espanso-X11.AppImage
            Espanso-X11.AppImage.sha256.txt
      - name: Upload artifacts to Github Releases
        run: |
          gh release upload ${{ needs.extract-version.outputs.espanso_version }} Espanso-X11.AppImage Espanso-X11.AppImage.sha256.txt
  
  linux-deb:
    needs: ["extract-version", "create-release"]
    runs-on: ubuntu-latest
    continue-on-error: false

    steps:
      - uses: actions/checkout@v4
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.espanso_version }}
      - name: Build docker image
        run: |
          sudo docker build -t espanso-ubuntu . -f .github/scripts/Dockerfile
      - name: Build Deb packages
        run: |
          sudo docker run --rm -v "$(pwd):/shared" espanso-ubuntu espanso/.github/scripts/ubuntu/build_deb.sh
      - uses: actions/upload-artifact@v4
        name: upload-unsigned-artifact
        with:
          name: Ubuntu-Debian Artifacts
          path: |
            espanso-debian-x11-amd64.deb
            espanso-debian-wayland-amd64.deb
      - name: Upload artifacts to Github Releases
        run: |
          gh release upload ${{ needs.extract-version.outputs.espanso_version }} espanso-debian-x11-amd64.deb espanso-debian-wayland-amd64.deb espanso-debian-x11-amd64-sha256.txt espanso-debian-wayland-amd64-sha256.txt 

  macos-intel:
    needs: ["extract-version", "create-release"]
    runs-on: macos-latest
    continue-on-error: false

    steps:
      - uses: actions/checkout@v4
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.espanso_version }}
      - name: Install rust-script and cargo-make
        run: |
          cargo install rust-script
          cargo install --force cargo-make --version 0.37.5
      - name: Test
        run: cargo make --profile release -- test-binary
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.13"
      - name: Build
        run: cargo make --profile release -- create-bundle
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.13"

      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Codesign executable
        env: 
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" buildespanso.keychain 
          security default-keychain -s buildespanso.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" buildespanso.keychain
          security import certificate.p12 -k buildespanso.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" buildespanso.keychain
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime target/mac/Espanso.app -v
      - name: "Notarize executable"
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          echo "Create keychain profile"
          xcrun notarytool store-credentials "espanso-notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "target/mac/Espanso.app" "notarization.zip"

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "espanso-notarytool-profile" --wait

          echo "Attach staple"
          xcrun stapler staple "target/mac/Espanso.app"
      - name: Create ZIP archive
        run: |
          ditto -c -k --sequesterRsrc --keepParent target/mac/Espanso.app Espanso-Mac-Intel.zip
      - uses: actions/upload-artifact@v4
        name: upload-unsigned-artifact
        id: upload-artifact-macos-intel
        with:
          name: Mac Intel Artifacts
          path: |
            ./Espanso-Mac-Intel.zip

      - name: Calculate hashes
        run: |
          shasum -a 256 Espanso-Mac-Intel.zip > Espanso-Mac-Intel.zip.sha256.txt
      - name: Upload artifacts to Github Releases
        run: |
          gh release upload ${{ needs.extract-version.outputs.espanso_version }} Espanso-Mac-Intel.zip Espanso-Mac-Intel.zip.sha256.txt
  
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  macos-m1:
    needs: ["extract-version", "create-release"]
    runs-on: macos-latest
    continue-on-error: false

    steps:
      - uses: actions/checkout@v4
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.espanso_version }}
      - name: Install rust target
        run: rustup update && rustup target add aarch64-apple-darwin
      - name: Install rust-script and cargo-make
        run: |
          cargo install rust-script
          cargo install --force cargo-make --version 0.37.5
      - name: Build
        run: cargo make --env BUILD_ARCH=aarch64-apple-darwin --profile release -- create-bundle
      - name: Create ZIP archive
        run: |
          ditto -c -k --sequesterRsrc --keepParent target/mac/Espanso.app Espanso-Mac-M1.zip
      - uses: actions/upload-artifact@v4
        name: upload-unsigned-artifact
        id: upload-artifact-macos-m1
        with:
          name: Mac M1 Artifacts
          path: |
            ./Espanso-Mac-M1.zip
      - id: sign-macos-m1-release
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: 'e86b1459-62fc-4c7c-aac9-185d60749a03'
          project-slug: 'espanso'
          signing-policy-slug: 'test-signing'
          github-artifact-id: ${{ steps.upload-artifact-macos-m1.outputs.artifact-id }}
          wait-for-completion: true
          output-artifact-directory: '.'
          parameters: |
            version: "${{ needs.extract-version.outputs.espanso_version }}"
      - name: Calculate hashes
        run: |
          shasum -a 256 Espanso-Mac-M1.zip > Espanso-Mac-M1.zip.sha256.txt
      - name: Upload artifacts to Github Releases
        run: |
          gh release upload ${{ needs.extract-version.outputs.espanso_version }} Espanso-Mac-M1.zip Espanso-Mac-M1.zip.sha256.txt
  
  macos-publish-homebrew:
    needs: ["extract-version", "create-release", "macos-m1", "macos-intel"]
    runs-on: macos-latest
    continue-on-error: false

    steps:
      - uses: actions/checkout@v4
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.espanso_version }}

      - name: "Setup SSH deploy key"
        uses: webfactory/ssh-agent@fc49353b67b2b7c1e0e6a600572d01a69f2672dd
        with:
          ssh-private-key: ${{ secrets.HOMEBREW_CASK_SSH_PRIVATE_KEY }}
      
      - name: Create and Publish Homebrew Cask
        run: |
          VERSION="${{ needs.extract-version.outputs.espanso_version }}" ./scripts/publish_homebrew_version.sh

          echo "Cask formula has been published here: "
